openapi: 3.0.1
info:
  title: Schemata App 
  description: 'This is a sample schema for a generic app. Authorization partneeds to be worked on.'
  termsOfService: http://schemata.ai/terms/
  contact:
    email: schemateam@schemata.ai
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://schemata.ai
servers:
- url: https://localhost:8080
tags:
- name: data
  description: Everything about data. All shouldbe able to read and create but update only their own items.
  externalDocs:
    description: Find out more
    url: http://schemata.ai
- name: schema
  description: Access schema. Only admin should be able to write and all should be able to read
- name: tag
  description: Access tags. Tags get added via items. All should be able to read and write.
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://schemata.ai
paths:
  /tags:
    get:
      tags:
      - tag
      summary: Lists all tag names
      description: Name of tags
      operationId: listTags
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                description: return just the string and not the object
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          description: Invalid tag name
          content: {}
        404:
          description: Tags not found
          content: {}
      security:
      - api_key: []
  /schemas:
    get:
      tags:
      - schema
      summary: Lists all schema names
      description: Name and uri can be provided
      operationId: listSchemas
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        400:
          description: Invalid schema name
          content: {}
        404:
          description: ReferredData not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - schema
      summary: Add a new Schema
      operationId: addSchema
      requestBody:
        description: Schema object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
          application/xml:
            schema:
              $ref: '#/components/schemas/Schema'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
      x-codegen-request-body-name: body
  /schemas/{schemaName}:
    get:
      tags:
      - schema
      summary: Lists nested schemas if any
      description: Name and further sub-schema can be provided
      operationId: listChildrenSchemas
      parameters:
        - $ref: '#/components/parameters/schemaName'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        400:
          description: Invalid schema name
          content: {}
        404:
          description: Schema not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - data
      summary: Add a new data to the Schema
      operationId: addData
      parameters:
        - $ref: '#/components/parameters/schemaName'
      requestBody:
        description: Schema object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferredData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ReferredData'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
      x-codegen-request-body-name: body
  /schema/{schemaName}/findByStatus:
    get:
      tags:
      - data
      summary: Finds items by status within a given schema
      description: Multiple status values can be provided with comma separated strings
      operationId: findDatasByStatus
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            $ref: '#/components/schemas/DataStateEnum'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferredData'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferredData'
        400:
          description: Invalid status value
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /schema/{schemaName}/findByTags:
    get:
      tags:
      - data
      summary: Finds items by tags within a given schema
      description: Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findDatasByTags
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferredData'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferredData'
        400:
          description: Invalid tag value
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /schema/{schemaName}/{dataId}:
    get:
      tags:
      - data
      summary: Find data by ID. This can even be a sub-schema
      description: Returns a single data
      operationId: getDataById
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - $ref: '#/components/parameters/dataId'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ReferredData'
            application/json:
              schema:
                $ref: '#/components/schemas/ReferredData'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: ReferredData not found
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - data
      summary: Updates a data in the store with form data
      operationId: updateData
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - $ref: '#/components/parameters/dataId'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the data
                status:
                  type: string
                  description: Updated status of the data
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
    delete:
      tags:
      - data
      summary: Deletes a data
      operationId: deleteData
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - $ref: '#/components/parameters/schemaName'
        - $ref: '#/components/parameters/dataId'
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: ReferredData not found
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /schema/{schemaName}/uploadDatas:
    post:
      tags:
      - data
      summary: uploads a file with items
      operationId: uploadDatas
      parameters:
        - $ref: '#/components/parameters/schemaName'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /schema/{schemaName}/{dataId}/uploadFile:
    post:
      tags:
      - data
      summary: uploads a file to the data
      operationId: uploadFile
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - $ref: '#/components/parameters/dataId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /schemas/{schemaName}/{dataId}/{child}:
    get:
      tags:
      - schema
      summary: Lists child schema items. e.g. /schemas/country/India/states
      description: Name and uri can be provided
      operationId: listChildDatas
      parameters:
      - $ref: '#/components/parameters/schemaName'
      - $ref: '#/components/parameters/dataId'
      - name: child
        in: path
        description: name of N schema list to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reference'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reference'
        400:
          description: Invalid schema name
          content: {}
        404:
          description: ReferredData not found
          content: {}
      security:
      - api_key: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/upload:
    post:
      tags:
      - user
      summary: Creates list of users with given input list
      operationId: uploadUsers
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                username:
                  description: The user name for login
                  type: string
                password:
                  description: The password for login in clear text
                  type: string
              required:
                - username
                - password
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    UserRef:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          $ref: '#/components/schemas/DataStateEnum'
      xml:
        name: User
    Tag:
      type: object
      properties:
        name:
          type: string
      xml:
        name: Tag
    Reference:
      description: Reference to an data or a sub-schema 
      anyOf:
      - type: object
        properties:
          name:
            type: string
          uri:
            type: string
      - type: string
    Schema:
      description: A Schema of an object being defined
      required:
      - name
      type: object
      allOf:
        - $ref: '#/components/schemas/ReferredData'
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        children:
          type: array
          xml:
            name: children
            wrapped: true
          items:
            $ref: '#/components/schemas/Schema'
      xml:
        name: ReferredData
    ReferredData:
      description: An data or a sub-schema 
      required:
      - name
      type: object
      properties:
        id0:
          type: integer
          format: int64
        type0:
          type: string
          description: 'name of the schema in which this data is stored'
          readOnly: true
        apiVersion0:
          type: integer
        pk0:
          type: string
        dataState0:
          $ref: '#/components/schemas/DataStateEnum'
        createdOn0:
          type: string
          format: datetime
        createdBy0:
          $ref: '#/components/schemas/UserRef'
        addedOn0:
          type: string
          format: datetime
        addedBy0:
          $ref: '#/components/schemas/UserRef'
        deletedOn0:
          type: string
          format: datetime
        deletedBy0:
          $ref: '#/components/schemas/UserRef'
        workitem0:
          type: string
        history0:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/ReferredData'
        old0:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/ReferredData'
      xml:
        name: ReferredData
    DataStateEnum:
      type: string
      description: data status in the store
      readOnly: true
      enum:
      - active
      - inWorkflow
      - inactive
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  parameters:
    schemaName: 
      name: schemaName
      in: path
      description: name of schema to return
      required: true
      schema:
        type: string
    dataId:
      name: dataId
      in: path
      description: ID of data to update
      required: true
      schema:
        type: integer
        format: int64
  securitySchemes:
    itemstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://itemsstore.schemata.ai/oauth/dialog
          scopes:
            write:items: modify items in your account
            read:items: read your items
    api_key:
      type: apiKey
      name: api_key
      in: header