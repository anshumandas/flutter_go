openapi: 3.0.1
info:
  title: Schemata App 
  description: 'This is a sample schema for a generic app. Authorization partneeds to be worked on.'
  termsOfService: http://schemata.ai/terms/
  contact:
    email: schemateam@schemata.ai
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://schemata.ai
servers:
- url: https://localhost:8080
tags:
- name: data
  description: Everything about data. All shouldbe able to read and create but update only their own items.
  externalDocs:
    description: Find out more
    url: http://schemata.ai
- name: schema
  description: Access schema. Only admin should be able to write and all should be able to read
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://schemata.ai
paths:
  /schemas:
    get:
      tags:
      - schema
      summary: Lists all schema names
      description: Name and uri can be provided
      operationId: listSchemas
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        400:
          description: Invalid schema name
          content: {}
        404:
          description: ReferredData not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - schema
      summary: Add a new Schema
      operationId: addSchema
      requestBody:
        description: Schema object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
          application/xml:
            schema:
              $ref: '#/components/schemas/Schema'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
      x-codegen-request-body-name: body
  /schemas/{schemaName}:
    get:
      tags:
      - schema
      summary: get the details of the given schema
      description: Schema details
      operationId: getSchema
      parameters:
        - $ref: '#/components/parameters/schemaName'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        400:
          description: Invalid schema name
          content: {}
        404:
          description: Schema not found
          content: {}
      security:
      - api_key: []
  /schemas/{schemaName}/relations:
    get:
      tags:
      - schema
      summary: Lists the relationships of the said schema
      description: Name and further sub-schema can be provided
      operationId: listChildrenSchemas
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/schemaName'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relationship'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relationship'
        400:
          description: Invalid schema name
          content: {}
        404:
          description: Schema not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - schema
      summary: Add a new relation to the Schema
      operationId: addData
      parameters:
        - $ref: '#/components/parameters/schemaName'
      requestBody:
        description: Schema object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relationship'
          application/xml:
            schema:
              $ref: '#/components/schemas/Relationship'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
      x-codegen-request-body-name: body
  /data/{schemaName}:
    get:
      tags:
      - data
      summary: Finds items by status within a given schema
      description: Multiple status values can be provided with comma separated strings
      operationId: findDatasByStatus
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - name: status
          in: query
          description: Status values that need to be considered for filter. default active
          required: false
          schema:
            $ref: '#/components/schemas/DataStateEnum'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferredData'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferredData'
        400:
          description: Invalid status value
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /data/{schemaName}/{dataId}:
    get:
      tags:
      - data
      summary: Find data by ID. This can even be a sub-schema
      description: Returns a single data
      operationId: getDataById
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - $ref: '#/components/parameters/dataId'
        - $ref: '#/components/parameters/versionMin'
        - $ref: '#/components/parameters/versionMax'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ReferredData'
            application/json:
              schema:
                $ref: '#/components/schemas/ReferredData'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: ReferredData not found
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - data
      summary: Updates a data in the store with form data
      operationId: updateData
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - $ref: '#/components/parameters/dataId'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the data
                status:
                  type: string
                  description: Updated status of the data
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
    delete:
      tags:
      - data
      summary: Deletes a data
      operationId: deleteData
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - $ref: '#/components/parameters/schemaName'
        - $ref: '#/components/parameters/dataId'
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: ReferredData not found
          content: {}
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /data/{schemaName}/uploadFile:
    post:
      tags:
      - data
      summary: uploads a file with items for the stated schema
      operationId: uploadData
      parameters:
        - $ref: '#/components/parameters/schemaName'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /data/{schemaName}/{dataId}/uploadFile:
    post:
      tags:
      - data
      summary: uploads a file to the specified data
      operationId: uploadFile
      parameters:
        - $ref: '#/components/parameters/schemaName'
        - $ref: '#/components/parameters/dataId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
      security:
      - itemstore_auth:
        - write:items
        - read:items
  /data/{schemaName}/{dataId}/{relationName}:
    get:
      tags:
      - data
      summary: Lists related items. e.g. /data/country/India/states
      description: Name and uri can be provided
      operationId: listChildDatas
      parameters:
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/schemaName'
      - $ref: '#/components/parameters/dataId'
      - name: relationName
        in: path
        description: name of relation list to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relation'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relation'
        400:
          description: Invalid schema name
          content: {}
        404:
          description: ReferredData not found
          content: {}
      security:
      - api_key: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/upload:
    post:
      tags:
      - user
      summary: Creates list of users with given input list
      operationId: uploadUsers
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                username:
                  description: The user name for login
                  type: string
                password:
                  description: The password for login in clear text
                  type: string
              required:
                - username
                - password
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    UserRef:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    User:
      type: object
      allOf:
        - $ref: '#/components/schemas/Tagged'
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          $ref: '#/components/schemas/DataStateEnum'
      xml:
        name: User
    Tagged:
      type: object
      properties:
        tags:
          type: array
          items: 
            type: string
      xml:
        name: Tag
    Reference:
      description: Reference to a data 
      readOnly: true
      anyOf:
      - type: object
        properties:
          summary:
            type: string
          link:
            description: contains the type, id, pk, sk, version information
            type: string
      - type: string
        description: in case the summary is not required and only link
    Schema:
      description: A Schema of an object being defined
      required:
      - name
      type: object
      allOf:
        - $ref: '#/components/schemas/ReferredData'
        - $ref: '#/components/schemas/Detail'
        - $ref: '#/components/schemas/Tagged'
      anyOf:
        - $ref: '#/components/schemas/FormSchema'
        - $ref: '#/components/schemas/ChoiceSchema'
      properties:
        namespace:
          type: string
        plural:
          type: string
        type:
          type: string
          enum:
          - Enum
          - Set
          - Referrable
          - Embedded
        confidentiality:
          type: string
          enum:
          - Public
          - Internal
          - Confidential
          - Restricted
        uiPersistence:
          type: string
          enum:
          - LRU
          - Session
          - Profile
          - AppFirstLoad
          - InApp
        state:
          $ref: '#/components/schemas/SchemaStateEnum'
      xml:
        name: Schema
    FormSchema:
      description: A Schema of an object being defined
      required:
      - fields
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Field'
        relations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Relation'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        inherits:
          type: array
          items:
            $ref: '#/components/schemas/SchemaRef'
        inheritedBy:
          type: array
          items:
            $ref: '#/components/schemas/SchemaRef'
        confidentiality:
          type: string
          enum:
          - Public
          - Internal
          - Confidential
          - Restricted
        retention:
          description: duration in millisecs
          type: number
        workflow:
          type: string
        within:
          $ref: '#/components/schemas/SchemaRef'
    ChoiceSchema:
      description: A Schema of an object being defined
      required:
      - fields
      type: object
      properties:
        choices:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Choice'
    SchemaRef:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Detail:
      description: An data or a sub-schema 
      required:
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Group:
      description: An data or a sub-schema 
      required:
      - name
      type: object
      allOf:
        - $ref: '#/components/schemas/Detail'
      oneOf:
        - type: object
          properties:
            fields:
              type: array
              items:
                type: string
        - type: object
          properties:
            visibility:
              type: object
              additionalProperties:
                type: string
        - type: object
          properties:
            content:
              type: object
              additionalProperties:
                type: string
        - type: object
          properties:
            indexType: 
              $ref: '#/components/schemas/IndexTypeEnum'
            fields:
              type: array
              items:
                type: string
      properties:
        type:
          type: string
          enum:
            - OneOf
            - AnyOf
            - Visibility
            - Content
            - Index
    IndexTypeEnum: 
      type: string
      enum:
        - Ascending
        - Descending
        - UniqueAscending
        - UniqueDescending
        - Text
    Choice:
      description: An data or a sub-schema 
      required:
      - name
      type: object
      allOf:
        - $ref: '#/components/schemas/DataEntry'
        - $ref: '#/components/schemas/Detail'
        - $ref: '#/components/schemas/Tagged'
      properties:
        value:
          type: object
    Field:
      description: An data or a sub-schema 
      required:
      - name
      type: object
      allOf:
        - $ref: '#/components/schemas/DataEntry'
        - $ref: '#/components/schemas/Detail'
      anyOf:
        - type: object
          description: used for number data types
          properties:
            min:
              type: number
            max:
              type: number
            step:
              type: number
        - type: object
          description: used for date data types
          properties:
            min:
              type: string
              format: datetime
            max:
              type: string
              format: datetime
            step:
              type: string
              format: datetime
        - type: object
          description: used for string data types
          properties:
            options:
              type: array
              items: 
                type: string
            allowOthers:
              type: boolean
        - type: object
          description: used for string data types
          properties:
            exclude:
              type: array
              items: 
                type: string
        - type: object
          description: used for string data types
          properties:
            pattern:
              type: string
            
      properties:
        type:
          type: string
          enum:
          - string
          - number
          - boolean
          - date
        defaultValue:
          type: object
        confidentiality:
          type: string
          enum:
          - Internal
          - Confidential
          - Restricted
          - Secret
        required:
          type: boolean
        editability:
          type: string
          enum:
          - Mutable
          - Immutable
          - SummaryField
          - KeyField
          - SystemField
        state:
          $ref: '#/components/schemas/SchemaStateEnum'
        indexed:
          $ref: '#/components/schemas/IndexTypeEnum'
      xml:
        name: Field
    Relationship:
      description: An data or a sub-schema 
      required:
      - name
      - linkedSchema
      type: object
      allOf:
        - $ref: '#/components/schemas/DataEntry'
        - $ref: '#/components/schemas/Detail'
      properties:
        schema:
          $ref: '#/components/schemas/SchemaRef'
        reverseName:
          type: string
        embedded:
          type: boolean
        counterName:
          type: string
        reverseCounterName:
          type: string
        type:
          type: string
          enum:
          - List
          - Set
          - SortedSet
          - OrderedSet
          - Map
          - LinkedMap
      xml:
        name: Relationship
    Data:
      description: An data or a sub-schema
      type: object
      properties:
        id0:
          type: integer
          format: int64
          readOnly: true
        type0:
          type: string
          description: 'name of the schema in which this data is stored'
          readOnly: true
        apiVersion0:
          type: integer
          readOnly: true
        pk0:
          type: string
          readOnly: true
      additionalProperties: true
      xml:
        name: Data
    Audited:
      description: An data or a sub-schema 
      type: object
      readOnly: true
      properties:
        version0:
          type: integer
        action0:
          $ref: '#/components/schemas/ActionEnum'
        On0:
          type: string
          format: datetime
        By0:
          $ref: '#/components/schemas/UserRef'
        workitem0:
          type: string
      xml:
        name: Audited
    DataEntry:
      description: An data or a sub-schema 
      type: object
      allOf:
        - $ref: '#/components/schemas/Data'
        - $ref: '#/components/schemas/Audited'
    ReferredData:
      description: A data that is referred. It can contain some fields of native data types and also relations which are embedded. Referred relations are called via separate API (we can use HATEOAS links in generated openapi code) 
      type: object
      allOf:
        - $ref: '#/components/schemas/Data'
      properties:
        dataState0:
          $ref: '#/components/schemas/DataStateEnum'
        createdOn0:
          type: string
          format: datetime
          readOnly: true
        createdBy0:
          $ref: '#/components/schemas/UserRef'
        lastAction0:
          $ref: '#/components/schemas/Audited'
        history0:
          type: object
          readOnly: true
          additionalProperties:
            $ref: '#/components/schemas/DataEntry'
        old0:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/ReferredData'
        version0:
          description: current version
          type: number
      xml:
        name: ReferredData
    Relation:
      description: An data or a sub-schema 
      type: object
      allOf:
        - $ref: '#/components/schemas/Reference'
      properties:
        dataState0:
          $ref: '#/components/schemas/DataStateEnum'
        addedOn0:
          type: string
          format: datetime
        addedBy0:
          $ref: '#/components/schemas/UserRef'
        lastAction0:
          $ref: '#/components/schemas/Audited'
      xml:
        name: Relation
    ActionEnum:
      type: string
      description: action done
      readOnly: true
      enum:
      - create
      - read
      - update
      - delete
      - list
      - add
      - remove
    DataStateEnum:
      type: string
      description: data status in the store
      readOnly: true
      enum:
      - stored
      - validated
      - workflow
      - active
      - inactive
    SchemaStateEnum:
      type: string
      description: schema status in the store
      readOnly: true
      enum:
      - active
      - proposed
      - rejected
      - deprecated
      - dropped
    UploadResponse:
      description: used for providing upload action response
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  parameters:
    schemaName: 
      name: schemaName
      in: path
      description: name of schema to return
      required: true
      schema:
        type: string
    dataId:
      name: dataId
      in: path
      description: ID of data to update
      required: true
      schema:
        type: integer
        format: int64
    limit:
      name: limit
      in: query
      description: size for pagination
      required: false
      schema:
        type: integer
        format: int64
    offset:
      name: offset
      in: query
      description: start point for pagination
      required: false
      schema:
        type: integer
        format: int64
    versionMin:    
      name: versionMin
      in: query
      description: Tags to filter by
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
    versionMax:
      name: versionMax
      in: query
      description: Tags to filter by
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
  securitySchemes:
    itemstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://itemsstore.schemata.ai/oauth/dialog
          scopes:
            write:items: modify items in your account
            read:items: read your items
    api_key:
      type: apiKey
      name: api_key
      in: header